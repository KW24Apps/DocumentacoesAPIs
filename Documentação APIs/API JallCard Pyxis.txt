# üìã **API JALLCARD - DOCUMENTA√á√ÉO T√âCNICA**

> **Documenta√ß√£o completa da API JallCard Pyxis para produ√ß√£o de cart√µes**  
> **Vers√£o:** 3.0.0  
> **Tecnologia:** OpenAPI 3.0.3 (Swagger)  
> **Framework:** Quarkus 3.9.4  

---

## üåê **AMBIENTES DISPON√çVEIS**

| **Ambiente** | **URL** | **Porta** | **Documenta√ß√£o** |
|--------------|---------|-----------|------------------|
| **Produ√ß√£o** | `https://api-sp.jallcard.com.br` | `8143` | `https://api-sp.jallcard.com.br:8143/doc/` |
| **Homologa√ß√£o** | `https://api-hom.jallcard.com.br` | `8144` | `https://api-hom.jallcard.com.br:8144/doc/` |

## üîê **AUTENTICA√á√ÉO**

- **Tipo:** Basic Auth
- **Esquema:** HTTP Basic Authentication
- **Headers:** `Authorization: Basic [base64(usuario:senha)]`

---

## üìä **ESTRUTURA DA API**

### **üìÅ CATEGORIAS DE ENDPOINTS**

1. **üóÉÔ∏è Arquivos** - Gerenciamento de arquivos processados
2. **üìÑ Documentos** - Consulta e gerenciamento de documentos
3. **üì¶ Estoque** - Controle de estoque de insumos
4. **üöö Expedi√ß√£o** - Gest√£o de expedi√ß√µes
5. **üìã Lotes de Expedi√ß√£o** - Controle de lotes
6. **‚öôÔ∏è Ordens de Produ√ß√£o** - Gerenciamento de ordens
7. **üìã Pedidos de Produ√ß√£o** - Controle de pedidos

---

## üîó **ENDPOINTS DISPON√çVEIS**

### **üóÉÔ∏è ARQUIVOS**

#### `GET /api/arquivos/processados`
**Descri√ß√£o:** Lista os arquivos processados  
**Per√≠odo:** √öltimos 7 dias (padr√£o)

**Par√¢metros:**
- `de` (query, opcional) - Data inicial (LocalDateTime)
- `para` (query, opcional) - Data final (LocalDateTime)

**Respostas:**
- `200` - Lista de arquivos processados
- `400` - Per√≠odo maior que 7 dias
- `401` - N√£o autorizado
- `403` - N√£o permitido

---

### **üìÑ DOCUMENTOS**

#### `GET /api/documentos`
**Descri√ß√£o:** Pesquisa documentos  
**Regra:** Apenas um par√¢metro entre OP, c√≥digo de pesquisa ou lote de expedi√ß√£o

**Par√¢metros:**
- `codigoPesquisa` (query, opcional) - C√≥digo para pesquisa
- `incluirItens` (query, opcional) - Incluir itens do documento (boolean)
- `loteExpedicao` (query, opcional) - C√≥digo do lote de expedi√ß√£o
- `op` (query, opcional) - Ordem de produ√ß√£o

#### `GET /api/documentos/{id}`
**Descri√ß√£o:** Consulta documento espec√≠fico por ID

**Par√¢metros:**
- `id` (path, obrigat√≥rio) - ID do documento
- `incluirItens` (query, opcional) - Incluir itens (boolean)

---

### **üì¶ ESTOQUE**

#### `GET /api/estoque`
**Descri√ß√£o:** Consulta estoque atual de insumos

**Par√¢metros:**
- `codigoInsumo` (query, opcional) - C√≥digo espec√≠fico do insumo

---

### **üöö EXPEDI√á√ïES**

#### `GET /api/expedicoes`
**Descri√ß√£o:** Lista expedi√ß√µes

#### `GET /api/expedicoes/{codigo}`
**Descri√ß√£o:** Consulta expedi√ß√£o espec√≠fica

**Par√¢metros:**
- `codigo` (path, obrigat√≥rio) - C√≥digo da expedi√ß√£o

---

### **üìã LOTES DE EXPEDI√á√ÉO**

#### `GET /api/lotesExpedicao`
**Descri√ß√£o:** Lista lotes de expedi√ß√£o

#### `GET /api/lotesExpedicao/{codigo}`
**Descri√ß√£o:** Consulta lote espec√≠fico

**Par√¢metros:**
- `codigo` (path, obrigat√≥rio) - C√≥digo do lote

---

### **‚öôÔ∏è ORDENS DE PRODU√á√ÉO**

#### `GET /api/ordensProducao`
**Descri√ß√£o:** Lista ordens de produ√ß√£o

#### `GET /api/ordensProducao/gravadas`
**Descri√ß√£o:** Lista ordens de produ√ß√£o j√° gravadas

#### `GET /api/ordensProducao/{codigo}`
**Descri√ß√£o:** Consulta ordem espec√≠fica

**Par√¢metros:**
- `codigo` (path, obrigat√≥rio) - C√≥digo da ordem

---

### **üìã PEDIDOS DE PRODU√á√ÉO**

#### `GET /api/pedidosProducao`
**Descri√ß√£o:** Lista pedidos de produ√ß√£o

#### `GET /api/pedidosProducao/{id}`
**Descri√ß√£o:** Consulta pedido espec√≠fico

**Par√¢metros:**
- `id` (path, obrigat√≥rio) - ID do pedido

---

## üìã **SCHEMAS/MODELOS DE DADOS**

### **üìÑ Documento**
```json
{
  "codigo": "6504 15XX XXXX 2276",
  "destinatario": {
    // Informa√ß√µes do destinat√°rio
  },
  "atributos": {
    // Atributos customizados (objeto chave-valor)
  },
  "loteExpedicao": {
    // Informa√ß√µes do lote (se aplic√°vel)
  },
  "expedicao": {
    // Informa√ß√µes da expedi√ß√£o (se aplic√°vel)
  },
  "itens": [
    // Lista de itens do documento
  ]
}
```

### **üì¶ Estoque**
```json
{
  "insumo": {
    "codigo": "10XXX0001",
    "codigoExterno": "CAR_CRED_256",
    "descricao": "Cart√£o de cr√©dito 256",
    "tipo": "Cart√£o com Chip"
  },
  "estoqueAtual": 9987,
  "rejeitosArmazenados": 23
}
```

### **üöö Expedi√ß√£o**
```json
{
  "codigo": "71093398",
  "entregadora": "FLASH",
  "data": "2023-11-14T09:48:28.109",
  "lotes": [
    // Lista de lotes da expedi√ß√£o
  ]
}
```

### **üìã Lote de Expedi√ß√£o**
```json
{
  "codigo": "04089043",
  "contratoEntregadora": "FLASH",
  "pedidoProducao": 10000180826,
  "data": "2023-11-14T09:48:28.109",
  "expedicao": "71093398",
  "lacre": "746821598379"
}
```

### **‚öôÔ∏è Ordem de Produ√ß√£o**
```json
{
  "codigo": "XXX2400001",
  "quantidade": 254,
  "lote": "104367",
  "produtos": [
    // Lista de produtos
  ],
  "producao": {
    "gravacao": "2023-11-14T09:48:28.109",
    "preExpedicao": "2023-11-15T10:57:02.155",
    "expedicao": "2023-11-15T12:32:14.854"
  },
  "status": "ABERTA" // ABERTA, FINALIZADA, CANCELADA, REJEITADA
}
```

### **üìã Pedido de Produ√ß√£o**
```json
{
  "id": 10000180826,
  "arquivos": [
    // Lista de arquivos que geraram o pedido
  ],
  "ops": [
    // Lista de c√≥digos das ordens vinculadas
  ],
  "data": "2023-11-14T09:48:28.109"
}
```

---

## üîÑ **C√ìDIGOS DE RETORNO**

| **C√≥digo** | **Descri√ß√£o** | **Contexto** |
|------------|---------------|--------------|
| `200` | Sucesso | Dados retornados com sucesso |
| `400` | Bad Request | Par√¢metros inv√°lidos ou per√≠odo muito longo |
| `401` | Unauthorized | Credenciais inv√°lidas ou ausentes |
| `403` | Forbidden | Acesso negado ao recurso |
| `404` | Not Found | Recurso n√£o encontrado |

---

## üéØ **CASOS DE USO COMUNS**

### **1. Consultar Documentos por Lote**
```bash
GET /api/documentos?loteExpedicao=04089043&incluirItens=true
```

### **2. Verificar Estoque de Insumo**
```bash
GET /api/estoque?codigoInsumo=10XXX0001
```

### **3. Acompanhar Ordem de Produ√ß√£o**
```bash
GET /api/ordensProducao/XXX2400001
```

### **4. Listar Arquivos Processados Hoje**
```bash
GET /api/arquivos/processados?de=2024-08-12T00:00:00&para=2024-08-12T23:59:59
```

---

## ‚ö†Ô∏è **LIMITA√á√ïES E RESTRI√á√ïES**

1. **Per√≠odo de Consulta:** M√°ximo 7 dias para arquivos processados
2. **Autentica√ß√£o:** Obrigat√≥ria para todos os endpoints
3. **Rate Limiting:** N√£o especificado na documenta√ß√£o
4. **Par√¢metros Exclusivos:** Alguns endpoints aceitam apenas um par√¢metro por vez

---

## üõ†Ô∏è **INTEGRA√á√ÉO RECOMENDADA**

### **Headers Padr√£o:**
```http
Authorization: Basic [base64_credentials]
Content-Type: application/json
Accept: application/json
```

### **Tratamento de Erros:**
```php
// Exemplo de implementa√ß√£o
function consultarJallCardAPI($endpoint, $params = []) {
    $url = "https://api-sp.jallcard.com.br:8143" . $endpoint;
    
    // Adicionar par√¢metros √† URL
    if (!empty($params)) {
        $url .= '?' . http_build_query($params);
    }
    
    $ch = curl_init();
    curl_setopt_array($ch, [
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_HTTPHEADER => [
            'Authorization: Basic ' . base64_encode($usuario . ':' . $senha),
            'Content-Type: application/json'
        ],
        CURLOPT_SSL_VERIFYPEER => false, // Para ambiente de teste
        CURLOPT_TIMEOUT => 30
    ]);
    
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    if ($httpCode === 200) {
        return json_decode($response, true);
    } else {
        throw new Exception("Erro na API JallCard: HTTP $httpCode");
    }
}
```

---

## ÔøΩ **INTEGRA√á√ÉO TRIOCARD - FLUXO COMPLETO**

### **üìä FLUXO DE INTEGRA√á√ÉO PROPOSTO:**

```
TELENET WEBHOOK ‚Üí JALLCARD CONSULTA ‚Üí FLASH ENTREGA
     ‚Üì                ‚Üì                   ‚Üì
   Arquivo         Documentos         Rastreamento
   Gerado          Produ√ß√£o           Entrega Final
```

### **üîó PONTOS DE CONEX√ÉO:**

#### **1. TELENET ‚Üí JALLCARD**
**Trigger:** `mensagem = "Arquivo gerado"`  
**A√ß√£o:** Consultar `/api/pedidosProducao` para encontrar pedido relacionado

**Dados Telenet:**
```json
{
  "protocolo": "123456",
  "nome_arquivo": "arquivo_cartoes.txt",
  "cliente": "TRIO CARD",
  "mensagem": "Arquivo gerado"
}
```

**Consulta JallCard:**
```bash
GET /api/pedidosProducao
GET /api/ordensProducao/{codigo}
```

#### **2. JALLCARD ‚Üí FLASH**
**Trigger:** `status = "FINALIZADA"` na Ordem de Produ√ß√£o  
**A√ß√£o:** Extrair dados de expedi√ß√£o para consulta Flash

**Resposta JallCard:**
```json
{
  "ordem": {
    "codigo": "XXX2400001",
    "status": "FINALIZADA",
    "producao": {
      "expedicao": "2023-11-15T12:32:14.854"
    }
  },
  "expedicao": {
    "codigo": "71093398",
    "entregadora": "FLASH"
  }
}
```

**Dados para Flash:**
```json
{
  "clienteId": 4411,
  "cttId": [71093398],
  "numEncCli": ["XXX2400001"]
}
```

### **üéØ ENDPOINTS CR√çTICOS PARA INTEGRA√á√ÉO:**

1. **`GET /api/pedidosProducao`** - Localizar pedido por arquivo
2. **`GET /api/ordensProducao/{codigo}`** - Verificar status de produ√ß√£o
3. **`GET /api/expedicoes/{codigo}`** - Obter dados para Flash
4. **`GET /api/documentos?op={codigo}`** - Documentos por ordem

### **‚öôÔ∏è CAMPOS BITRIX SUGERIDOS:**

- `uf_status_jallcard` - Status da produ√ß√£o
- `uf_ordem_producao` - C√≥digo da ordem
- `uf_codigo_expedicao` - C√≥digo para Flash
- `uf_status_flash` - Status da entrega

---

## ÔøΩüìö **PR√ìXIMOS PASSOS**

1. **Configurar Credenciais** de acesso nos ambientes
2. **Implementar Helper** espec√≠fico para JallCard
3. **Criar Testes** para validar integra√ß√£o
4. **Documentar Casos de Uso** espec√≠ficos do projeto

---

*Documenta√ß√£o extra√≠da em: 12/08/2025*  
*Fonte: APIs JallCard Pyxis v3.0.0*  
*Mantido em: `/Projetos e demandas/Documenta√ß√£o APIs/`*
